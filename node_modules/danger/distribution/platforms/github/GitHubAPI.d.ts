import { api as fetch } from "../../api/fetch";
import { RepoMetaData } from "../../ci_source/ci_source";
import { GitHubPRDSL, GitHubUser } from "../../dsl/GitHubDSL";
import * as node_fetch from "node-fetch";
import * as GitHubNodeAPI from "github";
export declare type APIToken = string;
/** This represent the GitHub API */
export declare class GitHubAPI {
    readonly repoMetadata: RepoMetaData;
    readonly token: APIToken;
    fetch: typeof fetch;
    additionalHeaders: any;
    private readonly d;
    constructor(repoMetadata: RepoMetaData, token?: APIToken);
    /**
     * Bit weird, yes, but we want something that can be exposed to an end-user.
     * I wouldn't have a problem with moving this to use this API under the hood
     * but for now that's just a refactor someone can try.
     */
    getExternalAPI(): GitHubNodeAPI;
    /**
     * Grabs the contents of an individual file on GitHub
     *
     * @param {string} path path to the file
     * @param {string} [ref] an optional sha
     * @returns {Promise<string>} text contents
     *
     */
    fileContents(path: string, repoSlug?: string, ref?: string): Promise<string>;
    getDangerCommentID(): Promise<number | null>;
    updateCommentWithID(id: number, comment: string): Promise<any>;
    deleteCommentWithID(id: number): Promise<boolean>;
    getUserID(): Promise<number | undefined>;
    postPRComment(comment: string): Promise<any>;
    getPullRequestInfo(): Promise<GitHubPRDSL>;
    /**
     * Get list of commits in pull requests. This'll try to iterate all available pages
     * Until it reaches hard limit of api itself (250 commits).
     * https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request
     *
     */
    getPullRequestCommits(): Promise<any>;
    getUserInfo(): Promise<GitHubUser>;
    getPullRequestComments(): Promise<any>;
    getPullRequestDiff(): Promise<string>;
    getFileContents(path: string, repoSlug: string, ref: string): Promise<any>;
    getPullRequests(): Promise<any>;
    getReviewerRequests(): Promise<any>;
    getReviews(): Promise<any>;
    getIssue(): Promise<any>;
    updateStatus(passed: boolean, message: string): Promise<any>;
    private api(path, headers, body, method);
    get(path: string, headers?: any, body?: any): Promise<node_fetch.Response>;
    post(path: string, headers?: any, body?: any): Promise<node_fetch.Response>;
    patch(path: string, headers?: any, body?: any): Promise<node_fetch.Response>;
}
